#include <stdio.h>
#include<math.h>
#include <GL/glut.h>

#define WINDOW_SIZE	(512)

#define NUM_OF_VERTICES         (12)
#define NUM_OF_EDGES             (18)

int dx=3;

// (quadrangular) pyramid
double vertex[][3] = {
    { 0.0, 0.0, 0.1 }, // 頂点
    { 1.0, 0.0, -1.0 }, 
};


int edge[][2] = {
    { 0, 1 }, 
    { 1, 2 }, 
    { 2, 3 }, 
    { 3, 0 },
    
    { 4, 5 },
    { 5, 6 }, 
    { 6, 7 }, 
    { 7, 4 },
    
    { 8, 9 },
    { 9, 10},
    {10, 11},
    {11, 8 },
    
    { 0, 4 },
    { 1, 5 },
    { 2, 10},
    { 3, 11},
    
    { 7, 8 },
    { 6, 9 }
};

// angles of incidence and azimuth
double incidence        = 45.0;
double azimuth          = 15.0;

// flags for mouse button ON/OFF (OFF = 0, ON = 1)
int left_mouse = 0, middle_mouse = 0, right_mouse = 0;
// previous coordinates of the mouse pointer
int last_pointer_x, last_pointer_y;

// draw coordinate axes
void draw_axes( void )
{
    // set the line width
    glLineWidth( 3.0 );

    // draw the coordinate axes
    glBegin( GL_LINES );

    // change color to red
    glColor3d (  1.0,  0.0,  0.0 );
    // draw the x-axis
    glVertex3d(  0.0,  0.0,  0.0 );
    glVertex3d(  0.8,  0.0,  0.0 );

    // change color to green
    glColor3d (  0.0,  1.0,  0.0 );
    // draw the y-axis
    glVertex3d(  0.0,  0.0,  0.0 );
    glVertex3d(  0.0,  0.8,  0.0 );

    // change color to blue
    glColor3d (  0.0,  0.5,  1.0 );
    // draw the z-axis
    glVertex3d(  0.0,  0.0,  0.0 );
    glVertex3d(  0.0,  0.0,  0.8 );

    glEnd();
}

// draw the object 
void draw_object( void )
{
    // loop counter
    int i;

    // set the line width
    glLineWidth( 3.0 );

    // change color to white
    glColor3d(  1.0,  1.0,  1.0 );

    // draw a list of line segments
    glBegin( GL_LINES );

    // for each edge
    for ( i = 0; i < NUM_OF_EDGES; ++i ) {
        // draw the edge
    	glVertex3dv( vertex[ edge[ i ][ 0 ] ] );
	glVertex3dv( vertex[ edge[ i ][ 1 ] ] );
    }
    glEnd();
}

// display callback function
void display( void )
{
    // clear buffer to preset color
    glClear( GL_COLOR_BUFFER_BIT );

    // set modelview matrix mode
    glMatrixMode( GL_MODELVIEW );
    // initialize with an identity matrix
    glLoadIdentity();

        // Note: rotations are applied in the reverse order

    // rotate the object by the angle of incidence
    glRotated( -incidence, 1.0, 0.0, 0.0 );
    // rotate the object by the angle of azimuth
    glRotated( -azimuth, 0.0, 0.0, 1.0 );


    // draw coordinate axes
    draw_axes();

    // draw the object
    draw_object();

    // swap the foreground and background buffers
    glutSwapBuffers();
}

// reshape callback function
void reshape( int w, int h )
{
    // specify the viewport
    glViewport( 0, 0, w, h );
    // initialize the transformation matrix
    glLoadIdentity();

    // calculate the aspect ratio of the window
    double aspect = ( double )w/( double )h;
    // smaller size
    int ss;
    // If the window is wide,
    if ( aspect >= 1.0 ) ss = h;
    // Otherwise
    else ss = w;
    // keep the aspect ratio irrespective of
    // the size of the window
    glOrtho( -2.0*(double)w/(double)ss,
              2.0*(double)w/(double)ss,
             -2.0*(double)h/(double)ss,
              2.0*(double)h/(double)ss,
             -1.0, 1.0 );
}
// callback function for handling mouse clicking
void mouse( int button, int state, int x, int y )
{
  // switch according to the mouse event
  switch ( button ) {
    // left mouse event
  case GLUT_LEFT_BUTTON:
    if ( state == GLUT_DOWN ) {
      // left mouse button is ON 	
      left_mouse = 1;
      // set the latest mouse coordinates
      last_pointer_x = x;
      last_pointer_y = y;
    }

    // left mouse button is OFF
    else left_mouse = 0;
    break;
    // middle mouse event
  case GLUT_MIDDLE_BUTTON:
    if ( state == GLUT_DOWN ) {
      // middle mouse button is ON 	
      middle_mouse = 1;
      // set the latest mouse coordinates
      last_pointer_x = x;
      last_pointer_y = y;
    }
    // middle mouse button is OFF
    else middle_mouse = 0;
    break;
    // right mouse event
  case GLUT_RIGHT_BUTTON:
    if ( state == GLUT_DOWN ) {
      // right mouse button is ON 	
      right_mouse = 1;
      // set the latest mouse coordinates
      last_pointer_x = x;
      last_pointer_y = y;
    }
    // right mouse button is OFF
    else right_mouse = 0;
    break;
  default:
    printf( "Unknown button" );
    break;
  }
}

// callback founction for handling mouse dragging
void motion( int x, int y )
{
     const double ratio = 0.1;
     const double ratio_B = 1;
     
     if(middle_mouse){
       dx += ( x - last_pointer_x );
       if
     }
     
    // dragging the right mouse button
    if ( right_mouse ) {
	azimuth -= ratio * ( double )( x - last_pointer_x );
	incidence -= ratio * ( double )( y - last_pointer_y );
    }

    
    // update the latest mouse coordinates
    last_pointer_x = x;
    last_pointer_y = y;
    // redraw the 3D scene on the screen
    glutPostRedisplay();
}


// initialize OpenGL setups
void init( void )
{
  // specify black color for clearing frame buffer
  glClearColor( 0.0, 0.0, 0.0, 0.0 );
}

// main function
int main( int argc, char *argv[] )
{
  // initialize GLUT 
  glutInit( &argc, argv );
  // locate the top-left corner of the window
  glutInitWindowPosition( 50, 50 );
    // set the window size
    glutInitWindowSize( WINDOW_SIZE, WINDOW_SIZE );
    // set initial display mode
    glutInitDisplayMode( GLUT_RGBA | GLUT_DOUBLE );
    // create a window
    glutCreateWindow( argv[0] );
    // set a pointer to the display callback function
    glutDisplayFunc( display );
    // set a pointer to the reshape callback function
    glutReshapeFunc( reshape );
    // set a pointer to the mouse callback function
    glutMouseFunc( mouse );
    // set a pointer to the motion callback function
    glutMotionFunc( motion );
    // clearing frame buffer
    init();
    // get into the main interaction loop
    glutMainLoop();
    
    return 0;
}
